// Memory v1.0

/**
 * Memory operations library.
 */ 
class Memory {
    static int heapStart, heapEnd, freeList, zeroBlock
    
    /** Initializes memory parameters. */
    function void init() {
        var Array memory
        
        let heapStart = 2048
        let heapEnd = 16382
        
        // 16383 reserved for Memory.alloc(0) requests
        let zeroBlock = 16383
        
        let freeList = heapStart + 1
        
        do Memory.poke(freeList - 1,(heapEnd-heapStart) - 1)    // Set initial free size
        do Memory.poke(freeList, 0)                     // Initialize free pointer
        
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        var Array memory

            let memory = 0
            return memory[address]
        } 


    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        var Array memory
        let memory = 0
        let memory[address] = value

    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        
        var int lastBlock, block, blockSize, blockSlice, listLen
        
        
        if (size < 0) | (size = 0)  {
            return(zeroBlock)
        }
        
        
        let block = freeList
        let lastBlock = block
        let listLen = 1
        
        // First-fit heuristics
        
        while !(block = null) {
            
            let blockSize = Memory.peek(block - 1)
            
            if  blockSize = size {
                // consume the whole block
                
                // Remove the block from the chain by setting the 
                // last block's next address to the next
                // block in the chain
                
                do Memory.poke(lastBlock, block)
                
                return block
                
                
            } else {
                if blockSize > size {
                    // determine the starting point of the new block
                    let blockSlice = (block + blockSize) - size - 1
                    
                    // set the new block's size
                    do Memory.poke(blockSlice - 1, size)
                    
                    // reset this block's size
                    do Memory.poke(block - 1, (blockSize - size)-1)
                    
                    // return the slice
                    
                    return blockSlice
                    
                }
            }
            
        let lastBlock = block
        let block = Memory.peek(block + 1)
        let listLen = listLen + 1
        }
        
    // Didn't find a match.
    // Attempt defragmentation?

    do Memory.defrag()

    }

    /** Attempt to defragment memory by combining adjacent free blocks */
    function void defrag() {
        // TODO some defragmenting
    
        // Heap Overflow
        do Sys.error(6)
    
    }
    
    
    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        // Add this segment into the beginning of the free list
        var int myAddress
        
        if object = zeroBlock {
            // do nothing
            return
        }
        
        let myAddress = object
        
        // First, set this block to point to the next block
        do Memory.poke(object, Memory.peek(freeList))
        
        // Then set the freelist pointer to point to this block
        do Memory.poke(freeList, myAddress)
        
        
        
        
    }
    
    function boolean isValid(int address) {
        if (((address > heapStart) | (address = heapStart)) & ((address < heapEnd) | (address = heapEnd))) {
            return true
        } else {
            return false
        }
    }
    
    
    function void report() {
        var int block, blocks
        
        
        do Output.printString("Free Memory report")
        do Output.println()
        
        let block = freeList
        let blocks = 1
        
        do Sys.breakpoint()
        
        while !(block = null) {
            do Output.printString("Block size: ")
            do Output.printInt(Memory.peek(block - 1))
            
            let block = Memory.peek(block)
            do Output.printString(" Next Block: ")
            do Output.printInt(block)
            do Output.println()
            
            let blocks = blocks + 1
        }
        
        do Output.printString("Total number of free blocks: ")
        do Output.printInt(blocks)
        
    }
        
        
}
