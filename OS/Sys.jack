// Sys v1.0

/**
 * A library of basic system services.
 */
class Sys {
    
    static int waitrate;
    static boolean showsplash;
    
    /** Performs all the initializations required by the OS. */
    function void init() {

        // *** WARNING ***
        // *** Do not assign any variables from within sys.init ***
        
        // show splash screen?
        do Sys.setSplash(true)
        
        
        // Do initialization routines first.
        do Memory.init()
        do Screen.init()
        do Output.init()
        do Math.init()
        do Keyboard.init()
        
        // 60 is good for VM Emulator
        do Sys.setWaitRate(60)



        if (showsplash) {
            do Sys.splash()
        }
        
        
        // Run the main program
        do Main.main()
        
        // Halt execution
        do Sys.halt()
        return
    }


    function void setSplash(boolean b) {
        let showsplash = b
    }
    
    function void setWaitRate(int i) {
        let waitrate = i
    }
    
    function void splash() {
        var int numdots;
        
        let numdots = 3
        
        do Output.printString("Jarvis 1.0")
        do Output.println()
        do Sys.wait(700)
        do Output.printString("booting")
        
        while (numdots > 0) {
            do Sys.wait(600)
            do Output.printString(".")
            let numdots = numdots - 1
        }
        
        do Sys.wait(1500)
        do Screen.clearScreen()
        do Sys.wait(1000)
    
    return
    }
    
    /** Halts execution. */
    function void halt() {
        while(true) { }
        return
    }

    /** Waits approximately duration milliseconds and then returns. */
    function void wait(int duration) {
        var int counter
        
        if duration < 0 {
            // Duration must be positive
            do Sys.error(1)
        }
        let counter = waitrate
        
        while (duration > 0) {
            while (counter > 0) {
                let counter = counter - 1
            }
            let counter = waitrate
            let duration = duration - 1
        }
        return
    }

    /** Prints the given error code in the form "ERR<errorCode>", and halts.
     *  
     * 
     *  Jack OS Error Codes

        Code Method/Function       Description
        ---- ---------------       -----------------------------------------------
         1   Sys.wait              Duration must be positive
         2   Array.new             Array size must be positive
         3   Math.divide           Division by zero
         4   Math.sqrt             Cannot compute square root of a negative number
         5   Memory.alloc          Allocated memory size must be positive
         6   Memory.alloc          Heap overflow
         7   Screen.drawPixel      Illegal pixel coordinates
         8   Screen.drawLine       Illegal line coordinates
         9   Screen.drawRectangle  Illegal rectangle coordinates
        12   Screen.drawCircle     Illegal center coordinates
        13   Screen.drawCircle     Illegal radius
        14   String.new            Maximum length must be non-negative
        15   String.charAt         String index out of bounds
        16   String.setCharAt      String index out of bounds
        17   String.appendChar     String is full
        18   String.eraseLastChar  String is empty
        19   String.setInt         Insufficient string capacity
        20   Output.moveCursor     Illegal cursor location
* 
*/

    function void error(int errorCode) {
        do Output.println()
        do Output.printString("ERR")
        do Output.printInt(errorCode)
        do Sys.halt()
        return
    }
    
    /**
     * Empty function to be used for injecting breakpoints
     */
     
    function void breakpoint() {}

}
