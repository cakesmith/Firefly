//
function Math.init 1
//
push constant 16
pop static 5
push static 5
push constant 2
call Math.divide 2
push constant 1
sub
pop static 6
push static 5
call Array.new 1
pop static 4
push constant 1
pop local 0
push static 4
push constant 0
add
pop pointer 1
push constant 1
pop that 0
label Math.init.while.0
push local 0
push static 5
push constant 1
add
lt
not
if-goto Math.init.while.1
push static 4
push local 0
add
pop pointer 1
push pointer 1
push static 4
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
pop temp 2
pop pointer 1
push temp 2
push pointer 1
push static 4
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
pop temp 2
pop pointer 1
push temp 2
add
pop that 0
push local 0
push constant 1
add
pop local 0
goto Math.init.while.0
label Math.init.while.1
return

//
function Math.twoToThe 0
//
push pointer 1
push static 4
push argument 0
add
pop pointer 1
push that 0
pop temp 2
pop pointer 1
push temp 2
return

//
function Math.abs 0
//
push argument 0
push constant 0
lt
pop temp 1
push temp 1
push temp 1
not
if-goto Math.abs.if.0
push argument 0
neg
return
label Math.abs.if.0
pop temp 1
push argument 0
return

//
function Math.multiply 3
//
push constant 0
pop local 2
push constant 0
pop local 0
push argument 0
pop local 1
label Math.multiply.while.0
push local 2
push static 5
lt
not
if-goto Math.multiply.while.1
push argument 1
push local 2
call Math.bit 2
pop temp 1
push temp 1
push temp 1
not
if-goto Math.multiply.if.0
push local 0
push local 1
add
pop local 0
label Math.multiply.if.0
pop temp 1
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply.while.0
label Math.multiply.while.1
push local 0
return

//
function Math.bit 0
//
push argument 0
push pointer 1
push static 4
push argument 1
add
pop pointer 1
push that 0
pop temp 2
pop pointer 1
push temp 2
and
push constant 0
eq
not
pop temp 1
push temp 1
push temp 1
not
if-goto Math.bit.if.0
push constant 0
not
return
label Math.bit.if.0
pop temp 1
push constant 0
return

//
function Math.divide 1
//
push argument 1
push constant 0
eq
pop temp 1
push temp 1
push temp 1
not
if-goto Math.divide.if.0
push constant 5
call Sys.error 1
pop temp 0
label Math.divide.if.0
pop temp 1
push argument 0
push argument 1
call Math.xor 2
push constant 0
lt
pop local 0
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push local 0
pop temp 1
push temp 1
push temp 1
not
if-goto Math.divide.if.1
push argument 0
push argument 1
call Math._subdivide 2
neg
return
label Math.divide.if.1
pop temp 1
push argument 0
push argument 1
call Math._subdivide 2
return

//
function Math.div 0
//
push argument 0
push argument 1
call Math.divide 2
return

//
function Math._subdivide 1
//
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
pop temp 1
push temp 1
push temp 1
not
if-goto Math._subdivide.if.0
push constant 0
pop static 7
push constant 0
return
label Math._subdivide.if.0
pop temp 1
push argument 0
push argument 1
push argument 1
add
call Math._subdivide 2
pop local 0
push argument 0
push static 7
sub
push argument 1
lt
pop temp 1
push temp 1
push temp 1
not
if-goto Math._subdivide.if.1
push local 0
push local 0
add
return
label Math._subdivide.if.1
if-goto Math._subdivide.goto.0
push static 7
push argument 1
add
pop static 7
push local 0
push local 0
add
push constant 1
add
return
label Math._subdivide.goto.0
return

//
function Math.xor 0
//
push argument 0
push argument 1
not
and
push argument 0
not
push argument 1
and
or
return

//
function Math.sqrt 4
//
push static 6
pop local 0
push constant 0
pop local 1
label Math.sqrt.while.0
push local 0
push constant 0
gt
push local 0
push constant 0
eq
or
not
if-goto Math.sqrt.while.1
push local 1
push pointer 1
push static 4
push local 0
add
pop pointer 1
push that 0
pop temp 2
pop pointer 1
push temp 2
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
push local 3
push constant 0
gt
and
pop temp 1
push temp 1
push temp 1
not
if-goto Math.sqrt.if.0
push local 2
pop local 1
label Math.sqrt.if.0
pop temp 1
push local 0
push constant 1
sub
pop local 0
goto Math.sqrt.while.0
label Math.sqrt.while.1
push local 1
return

//
function Math.max 0
//
push argument 1
push argument 0
gt
pop temp 1
push temp 1
push temp 1
not
if-goto Math.max.if.0
push argument 1
return
label Math.max.if.0
pop temp 1
push argument 0
return

//
function Math.min 0
//
push argument 1
push argument 0
lt
pop temp 1
push temp 1
push temp 1
not
if-goto Math.min.if.0
push argument 1
return
label Math.min.if.0
pop temp 1
push argument 0
return

//
function Math.mod 0
//
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return