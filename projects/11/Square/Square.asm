// Square
// compiled on Thursday March 13, 2014
// Bootstrap code
@256
D=A
@SP
M=D
@Sys.init
0;JMP
// function Output.init nLocals: 0
(Output.init)
// push constant 16384
@16384
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 4
@SP
AM=M-1
D=M
@Output.static.4
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new nArgs: 1
@Output.init.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Output.init.0)
// pop static 3
@SP
AM=M-1
D=M
@Output.static.3
M=D
// call Output.initMap nArgs: 0
@Output.init.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.init.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Output.createShiftedMap nArgs: 0
@Output.init.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0;JMP
(Output.init.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.initMap nLocals: 0
(Output.initMap)
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Output.initMap.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.initMap.0)
// pop static 5
@SP
AM=M-1
D=M
@Output.static.5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 33
@33
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 34
@34
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 20
@20
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 36
@36
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 37
@37
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 49
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 38
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 39
@39
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.9)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 40
@40
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.10)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 41
@41
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.11)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 42
@42
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.12)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 43
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.13)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 44
@44
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 46
@46
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.16
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.16)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 47
@47
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.17)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 49
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.19
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.19)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 50
@50
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.20
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.20)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.21
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.21)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 52
@52
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 26
@26
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 25
@25
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 60
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.22
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.22)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 53
@53
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.23
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.23)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.24
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.24)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 49
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.25
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.25)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.26
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.26)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 57
@57
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.27
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.27)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 58
@58
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.28
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.28)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.29
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.29)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 60
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.30
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.30)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 61
@61
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.31
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.31)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.32
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.32)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 64
@64
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.33
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.33)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.34
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.34)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 65
@65
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.35
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.35)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 66
@66
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.36
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.36)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 67
@67
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.37
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.37)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 68
@68
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.38
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.38)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 69
@69
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.39
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.39)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 70
@70
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.40
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.40)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 71
@71
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 44
@44
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.41
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.41)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 72
@72
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.42
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.42)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 73
@73
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.43
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.43)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 74
@74
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 60
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.44
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.44)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 75
@75
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.45
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.45)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 76
@76
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.46
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.46)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 77
@77
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 33
@33
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.47
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.47)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 78
@78
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.48
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.48)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 79
@79
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.49
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.49)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 80
@80
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.50
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.50)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 81
@81
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.51
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.51)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 82
@82
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.52
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.52)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 83
@83
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.53
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.53)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 84
@84
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.54
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.54)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 85
@85
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.55
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.55)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 86
@86
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.56
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.56)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 87
@87
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.57
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.57)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 88
@88
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.58
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.58)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 89
@89
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.59
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.59)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 90
@90
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 49
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.60
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.60)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 91
@91
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.61
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.61)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 92
@92
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.62
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.62)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 93
@93
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.63
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.63)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 94
@94
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.64
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.64)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 95
@95
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.65
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.65)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.66
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.66)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 97
@97
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.67)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 98
@98
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.68
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.68)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.69
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.69)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 100
@100
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 60
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.70
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.70)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 101
@101
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.71
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.71)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 102
@102
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 38
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.72
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.72)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 103
@103
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.73
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.73)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 104
@104
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.74
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.74)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 105
@105
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.75
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.75)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 106
@106
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.76
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.76)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.77)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 108
@108
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.78
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.78)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 109
@109
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 29
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 43
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 43
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 43
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 43
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.79
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.79)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 110
@110
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 29
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.80
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.80)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 111
@111
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.81
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.81)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 112
@112
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.82
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.82)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 113
@113
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.83
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.83)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 114
@114
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 29
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.84
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.84)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 115
@115
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.85
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.85)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 116
@116
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.86
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.86)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 117
@117
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.87
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.87)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 118
@118
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.88
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.88)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 119
@119
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.89
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.89)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 120
@120
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.90
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.90)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 121
@121
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.91
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.91)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 122
@122
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 27
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.92
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.92)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 123
@123
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.93
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.93)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 124
@124
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.94
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.94)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 125
@125
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.95
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.95)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 38
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 25
@25
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create nArgs: 12
@Output.initMap.96
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap.96)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.create nLocals: 1
(Output.create)
@SP
AM=M+1
M=0
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Output.create.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.create.0)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 5
@Output.static.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 4
@4
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 5
@5
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 6
@6
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 7
@7
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 8
@8
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 9
@9
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 9
@9
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 10
@10
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 11
@11
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.createShiftedMap nLocals: 4
(Output.createShiftedMap)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Output.createShiftedMap.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap.0)
// pop static 6
@SP
AM=M-1
D=M
@Output.static.6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(WHILE_EXP0)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.createShiftedMap.1
D;JLT
@SP
A=M-1
M=1
(Output.createShiftedMap.1)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 5
@Output.static.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Output.createShiftedMap.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap.2)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 6
@Output.static.6
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(WHILE_EXP1)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.createShiftedMap.3
D;JLT
@SP
A=M-1
M=1
(Output.createShiftedMap.3)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 256
@256
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Output.createShiftedMap.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.createShiftedMap.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
(WHILE_END1)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.createShiftedMap.5
D;JEQ
@SP
A=M-1
M=1
(Output.createShiftedMap.5)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_END0)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.getMap nLocals: 1
(Output.getMap)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.getMap.0
D;JLT
@SP
A=M-1
M=1
(Output.getMap.0)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.getMap.1
D;JGT
@SP
A=M-1
M=1
(Output.getMap.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
(IF_FALSE0)
// push static 2
@Output.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 5
@Output.static.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 6
@Output.static.6
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_END1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.drawChar nLocals: 4
(Output.drawChar)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.getMap nArgs: 1
@Output.drawChar.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.getMap
0;JMP
(Output.drawChar.0)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 11
@11
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.drawChar.1
D;JLT
@SP
A=M-1
M=1
(Output.drawChar.1)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push static 2
@Output.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@Output.static.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 256
@256
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@Output.static.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_END0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@Output.static.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.moveCursor nLocals: 0
(Output.moveCursor)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.moveCursor.0
D;JLT
@SP
A=M-1
M=1
(Output.moveCursor.0)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 22
@22
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.moveCursor.1
D;JGT
@SP
A=M-1
M=1
(Output.moveCursor.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.moveCursor.2
D;JLT
@SP
A=M-1
M=1
(Output.moveCursor.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.moveCursor.3
D;JGT
@SP
A=M-1
M=1
(Output.moveCursor.3)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 20
@20
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Output.moveCursor.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Output.moveCursor.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Output.moveCursor.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Output.moveCursor.5)
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 352
@352
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Output.moveCursor.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor.6)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Output.moveCursor.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor.7)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.moveCursor.8
D;JEQ
@SP
A=M-1
M=1
(Output.moveCursor.8)
@SP
A=M-1
M=M-1
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar nArgs: 1
@Output.moveCursor.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.moveCursor.9)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printChar nLocals: 0
(Output.printChar)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.newLine nArgs: 0
@Output.printChar.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Output.printChar.0)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.printChar.1
D;JEQ
@SP
A=M-1
M=1
(Output.printChar.1)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// call Output.println nArgs: 0
@Output.printChar.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.backSpace nArgs: 0
@Output.printChar.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Output.printChar.3)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.printChar.4
D;JEQ
@SP
A=M-1
M=1
(Output.printChar.4)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// call Output.backSpace nArgs: 0
@Output.printChar.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.backSpace
0;JMP
(Output.printChar.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar nArgs: 1
@Output.printChar.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.printChar.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push static 2
@Output.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
(IF_FALSE2)
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.printChar.7
D;JEQ
@SP
A=M-1
M=1
(Output.printChar.7)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// call Output.println nArgs: 0
@Output.printChar.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar.8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END3
@IF_END3
0;JMP
(IF_FALSE3)
// push static 2
@Output.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
(IF_END3)
(IF_END1)
(IF_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printString nLocals: 2
(Output.printString)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.length nArgs: 1
@Output.printString.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(Output.printString.0)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.printString.1
D;JLT
@SP
A=M-1
M=1
(Output.printString.1)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.charAt nArgs: 2
@Output.printString.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(Output.printString.2)
// call Output.printChar nArgs: 1
@Output.printString.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printString.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printInt nLocals: 0
(Output.printInt)
// push static 3
@Output.static.3
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.setInt nArgs: 2
@Output.printInt.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(Output.printInt.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push static 3
@Output.static.3
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString nArgs: 1
@Output.printInt.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printInt.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.println nLocals: 0
(Output.println)
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 352
@352
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8128
@8128
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.println.0
D;JEQ
@SP
A=M-1
M=1
(Output.println.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
(IF_FALSE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.backSpace nLocals: 0
(Output.backSpace)
// push static 2
@Output.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.backSpace.0
D;JGT
@SP
A=M-1
M=1
(Output.backSpace.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push static 0
@Output.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Output.static.0
M=D
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Output.backSpace.1
D;JEQ
@SP
A=M-1
M=1
(Output.backSpace.1)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push constant 8128
@8128
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
(IF_FALSE2)
// push static 1
@Output.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 321
@321
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.static.1
M=D
(IF_END1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.static.2
M=D
(IF_END0)
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar nArgs: 1
@Output.backSpace.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.backSpace.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.main nLocals: 1
(Main.main)
@SP
AM=M+1
M=0
// call SquareGame.new nArgs: 0
@Main.main.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@SquareGame.new
0;JMP
(Main.main.0)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call SquareGame.run nArgs: 1
@Main.main.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@SquareGame.run
0;JMP
(Main.main.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call SquareGame.dispose nArgs: 1
@Main.main.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@SquareGame.dispose
0;JMP
(Main.main.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.new nLocals: 0
(Array.new)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Array.new.0
D;JGT
@SP
A=M-1
M=1
(Array.new.0)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Array.new.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc nArgs: 1
@Array.new.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new.2)
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.dispose nLocals: 0
(Array.dispose)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc nArgs: 1
@Array.dispose.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function SquareGame.new nLocals: 0
(SquareGame.new)
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc nArgs: 1
@SquareGame.new.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(SquareGame.new.0)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// call Square.new nArgs: 3
@SquareGame.new.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.new
0;JMP
(SquareGame.new.1)
// pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function SquareGame.dispose nLocals: 1
(SquareGame.dispose)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.dispose nArgs: 1
@SquareGame.dispose.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.dispose
0;JMP
(SquareGame.dispose.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc nArgs: 1
@SquareGame.dispose.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(SquareGame.dispose.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function SquareGame.run nLocals: 3
(SquareGame.run)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(SquareGame_run_while_0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_while_1
@SP
AM=M-1
D=M
@SquareGame_run_while_1
D;JNE
(SquareGame_run_while_2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.0
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.0)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_while_3
@SP
AM=M-1
D=M
@SquareGame_run_while_3
D;JNE
// call Keyboard.keyPressed nArgs: 0
@SquareGame.run.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(SquareGame.run.1)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call SquareGame.moveSquare nArgs: 1
@SquareGame.run.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@SquareGame.moveSquare
0;JMP
(SquareGame.run.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto SquareGame_run_while_2
@SquareGame_run_while_2
0;JMP
(SquareGame_run_while_3)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 81
@81
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.3
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.3)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_0
@SP
AM=M-1
D=M
@SquareGame_run_if_0
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(SquareGame_run_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 90
@90
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.4
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.4)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_1
@SP
AM=M-1
D=M
@SquareGame_run_if_1
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.decSize nArgs: 1
@SquareGame.run.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.decSize
0;JMP
(SquareGame.run.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_run_if_1)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 88
@88
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.6
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.6)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_2
@SP
AM=M-1
D=M
@SquareGame_run_if_2
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.incSize nArgs: 1
@SquareGame.run.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.incSize
0;JMP
(SquareGame.run.7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_run_if_2)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 131
@131
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.8
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.8)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_3
@SP
AM=M-1
D=M
@SquareGame_run_if_3
D;JNE
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
(SquareGame_run_if_3)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 133
@133
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.9
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.9)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_4
@SP
AM=M-1
D=M
@SquareGame_run_if_4
D;JNE
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
(SquareGame_run_if_4)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 130
@130
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.10
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.10)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_5
@SP
AM=M-1
D=M
@SquareGame_run_if_5
D;JNE
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
(SquareGame_run_if_5)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 132
@132
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.11
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.11)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_if_6
@SP
AM=M-1
D=M
@SquareGame_run_if_6
D;JNE
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
(SquareGame_run_if_6)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
(SquareGame_run_while_4)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.run.12
D;JEQ
@SP
A=M-1
M=1
(SquareGame.run.12)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_run_while_5
@SP
AM=M-1
D=M
@SquareGame_run_while_5
D;JNE
// call Keyboard.keyPressed nArgs: 0
@SquareGame.run.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(SquareGame.run.13)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call SquareGame.moveSquare nArgs: 1
@SquareGame.run.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@SquareGame.moveSquare
0;JMP
(SquareGame.run.14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto SquareGame_run_while_4
@SquareGame_run_while_4
0;JMP
(SquareGame_run_while_5)
// goto SquareGame_run_while_0
@SquareGame_run_while_0
0;JMP
(SquareGame_run_while_1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function SquareGame.moveSquare nLocals: 1
(SquareGame.moveSquare)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.moveSquare.0
D;JEQ
@SP
A=M-1
M=1
(SquareGame.moveSquare.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_moveSquare_if_0
@SP
AM=M-1
D=M
@SquareGame_moveSquare_if_0
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.moveUp nArgs: 1
@SquareGame.moveSquare.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.moveUp
0;JMP
(SquareGame.moveSquare.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_moveSquare_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.moveSquare.2
D;JEQ
@SP
A=M-1
M=1
(SquareGame.moveSquare.2)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_moveSquare_if_1
@SP
AM=M-1
D=M
@SquareGame_moveSquare_if_1
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.moveDown nArgs: 1
@SquareGame.moveSquare.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.moveDown
0;JMP
(SquareGame.moveSquare.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_moveSquare_if_1)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.moveSquare.4
D;JEQ
@SP
A=M-1
M=1
(SquareGame.moveSquare.4)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_moveSquare_if_2
@SP
AM=M-1
D=M
@SquareGame_moveSquare_if_2
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.moveLeft nArgs: 1
@SquareGame.moveSquare.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.moveLeft
0;JMP
(SquareGame.moveSquare.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_moveSquare_if_2)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@SquareGame.moveSquare.6
D;JEQ
@SP
A=M-1
M=1
(SquareGame.moveSquare.6)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto SquareGame_moveSquare_if_3
@SP
AM=M-1
D=M
@SquareGame_moveSquare_if_3
D;JNE
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.moveRight nArgs: 1
@SquareGame.moveSquare.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.moveRight
0;JMP
(SquareGame.moveSquare.7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(SquareGame_moveSquare_if_3)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.wait nArgs: 1
@SquareGame.moveSquare.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(SquareGame.moveSquare.8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.init nLocals: 0
(Memory.init)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Memory.static.0
M=D
// push constant 2048
@2048
D=A
@SP
M=M+1
A=M-1
M=D
// push static 0
@Memory.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 14334
@14334
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 2049
@2049
D=A
@SP
M=M+1
A=M-1
M=D
// push static 0
@Memory.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2050
@2050
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.peek nLocals: 0
(Memory.peek)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Memory.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.poke nLocals: 0
(Memory.poke)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Memory.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.alloc nLocals: 1
(Memory.alloc)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.alloc.0
D;JLT
@SP
A=M-1
M=1
(Memory.alloc.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Memory.alloc.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push constant 2048
@2048
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.alloc.2
D;JLT
@SP
A=M-1
M=1
(Memory.alloc.2)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 16379
@16379
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.alloc.3
D;JGT
@SP
A=M-1
M=1
(Memory.alloc.3)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Memory.alloc.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.alloc.5
D;JGT
@SP
A=M-1
M=1
(Memory.alloc.5)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.alloc.6
D;JEQ
@SP
A=M-1
M=1
(Memory.alloc.6)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto IF_END3
@IF_END3
0;JMP
(IF_FALSE3)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(IF_END3)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(IF_FALSE2)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.deAlloc nLocals: 2
(Memory.deAlloc)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.deAlloc.0
D;JEQ
@SP
A=M-1
M=1
(Memory.deAlloc.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Memory.deAlloc.1
D;JEQ
@SP
A=M-1
M=1
(Memory.deAlloc.1)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(IF_END1)
(IF_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.new nLocals: 0
(String.new)
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc nArgs: 1
@String.new.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(String.new.0)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.new.1
D;JLT
@SP
A=M-1
M=1
(String.new.1)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.new.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.new.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.new.3
D;JGT
@SP
A=M-1
M=1
(String.new.3)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@String.new.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.new.4)
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
(IF_FALSE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.dispose nLocals: 0
(String.dispose)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.dispose.0
D;JGT
@SP
A=M-1
M=1
(String.dispose.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.dispose nArgs: 1
@String.dispose.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.dispose.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc nArgs: 1
@String.dispose.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(String.dispose.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.length nLocals: 0
(String.length)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.charAt nLocals: 0
(String.charAt)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.charAt.0
D;JLT
@SP
A=M-1
M=1
(String.charAt.0)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.charAt.1
D;JGT
@SP
A=M-1
M=1
(String.charAt.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.charAt.2
D;JEQ
@SP
A=M-1
M=1
(String.charAt.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.charAt.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.charAt.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setCharAt nLocals: 0
(String.setCharAt)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setCharAt.0
D;JLT
@SP
A=M-1
M=1
(String.setCharAt.0)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setCharAt.1
D;JGT
@SP
A=M-1
M=1
(String.setCharAt.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setCharAt.2
D;JEQ
@SP
A=M-1
M=1
(String.setCharAt.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.setCharAt.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setCharAt.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.appendChar nLocals: 0
(String.appendChar)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.appendChar.0
D;JEQ
@SP
A=M-1
M=1
(String.appendChar.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 17
@17
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.appendChar.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.appendChar.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.eraseLastChar nLocals: 0
(String.eraseLastChar)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.eraseLastChar.0
D;JEQ
@SP
A=M-1
M=1
(String.eraseLastChar.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 18
@18
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.eraseLastChar.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.eraseLastChar.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.intValue nLocals: 5
(String.intValue)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.intValue.0
D;JEQ
@SP
A=M-1
M=1
(String.intValue.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(IF_FALSE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.intValue.1
D;JEQ
@SP
A=M-1
M=1
(String.intValue.1)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_FALSE1)
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.intValue.2
D;JLT
@SP
A=M-1
M=1
(String.intValue.2)
@SP
A=M-1
M=M-1
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.intValue.3
D;JLT
@SP
A=M-1
M=1
(String.intValue.3)
@SP
A=M-1
M=M-1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 9
@9
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.intValue.4
D;JGT
@SP
A=M-1
M=1
(String.intValue.4)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@String.intValue.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.intValue.5)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_FALSE2)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(IF_FALSE3)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setInt nLocals: 4
(String.setInt)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.0
D;JEQ
@SP
A=M-1
M=1
(String.setInt.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 19
@19
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.setInt.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@String.setInt.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.setInt.2)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.3
D;JLT
@SP
A=M-1
M=1
(String.setInt.3)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
(IF_FALSE1)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.4
D;JGT
@SP
A=M-1
M=1
(String.setInt.4)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@String.setInt.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(String.setInt.5)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@String.setInt.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.setInt.6)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_FALSE2)
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.7
D;JLT
@SP
A=M-1
M=1
(String.setInt.7)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// push constant 19
@19
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@String.setInt.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt.8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE3)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.9
D;JEQ
@SP
A=M-1
M=1
(String.setInt.9)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// goto IF_FALSE4
@IF_FALSE4
0;JMP
(IF_TRUE4)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END4
@IF_END4
0;JMP
(IF_FALSE4)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(WHILE_EXP1)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@String.setInt.10
D;JLT
@SP
A=M-1
M=1
(String.setInt.10)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
(WHILE_END1)
(IF_END4)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.dispose nArgs: 1
@String.setInt.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.setInt.11)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.newLine nLocals: 0
(String.newLine)
// push constant 128
@128
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.backSpace nLocals: 0
(String.backSpace)
// push constant 129
@129
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.doubleQuote nLocals: 0
(String.doubleQuote)
// push constant 34
@34
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.init nLocals: 1
(Math.init)
@SP
AM=M+1
M=0
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Math.init.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init.0)
// pop static 1
@SP
AM=M-1
D=M
@Math.static.1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Math.init.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init.1)
// pop static 0
@SP
AM=M-1
D=M
@Math.static.0
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.init.2
D;JLT
@SP
A=M-1
M=1
(Math.init.2)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.abs nLocals: 0
(Math.abs)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.abs.0
D;JLT
@SP
A=M-1
M=1
(Math.abs.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.multiply nLocals: 5
(Math.multiply)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.0
D;JLT
@SP
A=M-1
M=1
(Math.multiply.0)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.1
D;JGT
@SP
A=M-1
M=1
(Math.multiply.1)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.2
D;JGT
@SP
A=M-1
M=1
(Math.multiply.2)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.3
D;JLT
@SP
A=M-1
M=1
(Math.multiply.3)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs nArgs: 1
@Math.multiply.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply.4)
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs nArgs: 1
@Math.multiply.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply.5)
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.6
D;JLT
@SP
A=M-1
M=1
(Math.multiply.6)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
(IF_FALSE0)
(WHILE_EXP0)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.7
D;JLT
@SP
A=M-1
M=1
(Math.multiply.7)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.multiply.8
D;JGT
@SP
A=M-1
M=1
(Math.multiply.8)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_FALSE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_FALSE2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divide nLocals: 4
(Math.divide)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.0
D;JEQ
@SP
A=M-1
M=1
(Math.divide.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Math.divide.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.2
D;JLT
@SP
A=M-1
M=1
(Math.divide.2)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.3
D;JGT
@SP
A=M-1
M=1
(Math.divide.3)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.4
D;JGT
@SP
A=M-1
M=1
(Math.divide.4)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.5
D;JLT
@SP
A=M-1
M=1
(Math.divide.5)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs nArgs: 1
@Math.divide.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs nArgs: 1
@Math.divide.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide.7)
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
(WHILE_EXP0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant 32767
@32767
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.8
D;JLT
@SP
A=M-1
M=1
(Math.divide.8)
@SP
A=M-1
M=M-1
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.9
D;JGT
@SP
A=M-1
M=1
(Math.divide.9)
@SP
A=M-1
M=M-1
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_FALSE2)
(IF_FALSE1)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
(WHILE_EXP1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.10
D;JGT
@SP
A=M-1
M=1
(Math.divide.10)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.divide.11
D;JGT
@SP
A=M-1
M=1
(Math.divide.11)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Math.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
(IF_FALSE3)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
(WHILE_END1)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// goto IF_FALSE4
@IF_FALSE4
0;JMP
(IF_TRUE4)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(IF_FALSE4)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.sqrt nLocals: 4
(Math.sqrt)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.sqrt.0
D;JLT
@SP
A=M-1
M=1
(Math.sqrt.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Math.sqrt.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.sqrt.2
D;JGT
@SP
A=M-1
M=1
(Math.sqrt.2)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Math.sqrt.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt.3)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.sqrt.4
D;JGT
@SP
A=M-1
M=1
(Math.sqrt.4)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.sqrt.5
D;JLT
@SP
A=M-1
M=1
(Math.sqrt.5)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_FALSE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.max nLocals: 0
(Math.max)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.max.0
D;JGT
@SP
A=M-1
M=1
(Math.max.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
(IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.min nLocals: 0
(Math.min)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Math.min.0
D;JLT
@SP
A=M-1
M=1
(Math.min.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
(IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.init nLocals: 1
(Screen.init)
@SP
AM=M+1
M=0
// push constant 16384
@16384
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Screen.static.1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Screen.static.2
M=D
// push constant 17
@17
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new nArgs: 1
@Screen.init.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Screen.init.0)
// pop static 0
@SP
AM=M-1
D=M
@Screen.static.0
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.init.1
D;JLT
@SP
A=M-1
M=1
(Screen.init.1)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.clearScreen nLocals: 1
(Screen.clearScreen)
@SP
AM=M+1
M=0
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8192
@8192
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.clearScreen.0
D;JLT
@SP
A=M-1
M=1
(Screen.clearScreen.0)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Screen.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.updateLocation nLocals: 0
(Screen.updateLocation)
// push static 2
@Screen.static.2
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Screen.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Screen.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Screen.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Screen.static.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D
(IF_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.setColor nLocals: 0
(Screen.setColor)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 2
@SP
AM=M-1
D=M
@Screen.static.2
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawPixel nLocals: 3
(Screen.drawPixel)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawPixel.0
D;JLT
@SP
A=M-1
M=1
(Screen.drawPixel.0)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawPixel.1
D;JGT
@SP
A=M-1
M=1
(Screen.drawPixel.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawPixel.2
D;JLT
@SP
A=M-1
M=1
(Screen.drawPixel.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawPixel.3
D;JGT
@SP
A=M-1
M=1
(Screen.drawPixel.3)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Screen.drawPixel.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawPixel.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Screen.drawPixel.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawPixel.5)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawPixel.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel.6)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawPixel.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel.7)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation nArgs: 2
@Screen.drawPixel.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawPixel.8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawConditional nLocals: 0
(Screen.drawConditional)
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawPixel nArgs: 2
@Screen.drawConditional.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END0
@IF_END0
0;JMP
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawPixel nArgs: 2
@Screen.drawConditional.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawLine nLocals: 11
(Screen.drawLine)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.0
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.0)
@SP
A=M-1
M=M-1
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.1
D;JGT
@SP
A=M-1
M=1
(Screen.drawLine.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.2
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.3
D;JGT
@SP
A=M-1
M=1
(Screen.drawLine.3)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Screen.drawLine.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawLine.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs nArgs: 1
@Screen.drawLine.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine.5)
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs nArgs: 1
@Screen.drawLine.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine.6)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.7
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.7)
@SP
A=M-1
M=M-1
// pop local 6
@6
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.8
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.8)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.9
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.9)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 2
@2
D=A
@ARG
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop argument 3
@3
D=A
@ARG
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_FALSE1)
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 8
@8
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.10
D;JGT
@SP
A=M-1
M=1
(Screen.drawLine.10)
@SP
A=M-1
M=M-1
// pop local 7
@7
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END2
@IF_END2
0;JMP
(IF_FALSE2)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 8
@8
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.11
D;JGT
@SP
A=M-1
M=1
(Screen.drawLine.11)
@SP
A=M-1
M=M-1
// pop local 7
@7
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_END2)
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawLine.12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine.12)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 5
@5
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawLine.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine.13)
// pop local 9
@9
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply nArgs: 2
@Screen.drawLine.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine.14)
// pop local 10
@10
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawConditional nArgs: 3
@Screen.drawLine.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine.15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.16
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.16)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawLine.17
D;JLT
@SP
A=M-1
M=1
(Screen.drawLine.17)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
(IF_TRUE3)
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 9
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 5
@5
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END3
@IF_END3
0;JMP
(IF_FALSE3)
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 10
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 5
@5
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// goto IF_FALSE4
@IF_FALSE4
0;JMP
(IF_TRUE4)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto IF_END4
@IF_END4
0;JMP
(IF_FALSE4)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(IF_END4)
(IF_END3)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawConditional nArgs: 3
@Screen.drawLine.18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine.18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawRectangle nLocals: 9
(Screen.drawRectangle)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.0
D;JGT
@SP
A=M-1
M=1
(Screen.drawRectangle.0)
@SP
A=M-1
M=M-1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.1
D;JGT
@SP
A=M-1
M=1
(Screen.drawRectangle.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.2
D;JLT
@SP
A=M-1
M=1
(Screen.drawRectangle.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.3
D;JGT
@SP
A=M-1
M=1
(Screen.drawRectangle.3)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.4
D;JLT
@SP
A=M-1
M=1
(Screen.drawRectangle.4)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.5
D;JGT
@SP
A=M-1
M=1
(Screen.drawRectangle.5)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 9
@9
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Screen.drawRectangle.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawRectangle.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Screen.drawRectangle.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle.7)
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawRectangle.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle.8)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 7
@7
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Screen.drawRectangle.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle.9)
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawRectangle.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle.10)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 8
@8
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// pop local 6
@6
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 5
@5
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawRectangle.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle.11)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(WHILE_EXP0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.12
D;JGT
@SP
A=M-1
M=1
(Screen.drawRectangle.12)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.13
D;JEQ
@SP
A=M-1
M=1
(Screen.drawRectangle.13)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation nArgs: 2
@Screen.drawRectangle.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle.14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation nArgs: 2
@Screen.drawRectangle.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle.15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawRectangle.16
D;JLT
@SP
A=M-1
M=1
(Screen.drawRectangle.16)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation nArgs: 2
@Screen.drawRectangle.17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle.17)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
(WHILE_END1)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation nArgs: 2
@Screen.drawRectangle.18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle.18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_END1)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawHorizontal nLocals: 11
(Screen.drawHorizontal)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.min nArgs: 2
@Screen.drawHorizontal.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal.0)
// pop local 7
@7
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.max nArgs: 2
@Screen.drawHorizontal.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal.1)
// pop local 8
@8
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.2
D;JGT
@SP
A=M-1
M=1
(Screen.drawHorizontal.2)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 256
@256
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.3
D;JLT
@SP
A=M-1
M=1
(Screen.drawHorizontal.3)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 512
@512
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.4
D;JLT
@SP
A=M-1
M=1
(Screen.drawHorizontal.4)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.5
D;JGT
@SP
A=M-1
M=1
(Screen.drawHorizontal.5)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.max nArgs: 2
@Screen.drawHorizontal.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal.6)
// pop local 7
@7
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.min nArgs: 2
@Screen.drawHorizontal.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal.7)
// pop local 8
@8
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Screen.drawHorizontal.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal.8)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawHorizontal.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal.9)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 9
@9
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide nArgs: 2
@Screen.drawHorizontal.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal.10)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawHorizontal.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal.11)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 10
@10
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 9
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// pop local 5
@5
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 10
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 0
@Screen.static.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawHorizontal.12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal.12)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 6
@6
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.13
D;JEQ
@SP
A=M-1
M=1
(Screen.drawHorizontal.13)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation nArgs: 2
@Screen.drawHorizontal.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal.14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation nArgs: 2
@Screen.drawHorizontal.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal.15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawHorizontal.16
D;JLT
@SP
A=M-1
M=1
(Screen.drawHorizontal.16)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation nArgs: 2
@Screen.drawHorizontal.17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal.17)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation nArgs: 2
@Screen.drawHorizontal.18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal.18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_END1)
(IF_FALSE0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawSymetric nLocals: 0
(Screen.drawSymetric)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal nArgs: 3
@Screen.drawSymetric.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal nArgs: 3
@Screen.drawSymetric.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal nArgs: 3
@Screen.drawSymetric.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 3
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal nArgs: 3
@Screen.drawSymetric.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@3
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawCircle nLocals: 3
(Screen.drawCircle)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.0
D;JLT
@SP
A=M-1
M=1
(Screen.drawCircle.0)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.1
D;JGT
@SP
A=M-1
M=1
(Screen.drawCircle.1)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.2
D;JLT
@SP
A=M-1
M=1
(Screen.drawCircle.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.3
D;JGT
@SP
A=M-1
M=1
(Screen.drawCircle.3)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Screen.drawCircle.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.5
D;JLT
@SP
A=M-1
M=1
(Screen.drawCircle.5)
@SP
A=M-1
M=M-1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 511
@511
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.6
D;JGT
@SP
A=M-1
M=1
(Screen.drawCircle.6)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.7
D;JLT
@SP
A=M-1
M=1
(Screen.drawCircle.7)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 255
@255
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.8
D;JGT
@SP
A=M-1
M=1
(Screen.drawCircle.8)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push constant 13
@13
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Screen.drawCircle.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle.9)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE1)
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawSymetric nArgs: 4
@Screen.drawCircle.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle.10)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.11
D;JGT
@SP
A=M-1
M=1
(Screen.drawCircle.11)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Screen.drawCircle.12
D;JLT
@SP
A=M-1
M=1
(Screen.drawCircle.12)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
(IF_TRUE2)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply nArgs: 2
@Screen.drawCircle.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle.13)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// goto IF_END2
@IF_END2
0;JMP
(IF_FALSE2)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply nArgs: 2
@Screen.drawCircle.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle.14)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(IF_END2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawSymetric nArgs: 4
@Screen.drawCircle.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle.15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.init nLocals: 0
(Sys.init)
// call Memory.init nArgs: 0
@Sys.init.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Math.init nArgs: 0
@Sys.init.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Screen.init nArgs: 0
@Sys.init.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Sys.init.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Output.init nArgs: 0
@Sys.init.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Sys.init.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Keyboard.init nArgs: 0
@Sys.init.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.init
0;JMP
(Sys.init.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Main.main nArgs: 0
@Sys.init.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Sys.halt nArgs: 0
@Sys.init.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.init.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.halt nLocals: 0
(Sys.halt)
(WHILE_EXP0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.wait nLocals: 1
(Sys.wait)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Sys.wait.0
D;JLT
@SP
A=M-1
M=1
(Sys.wait.0)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error nArgs: 1
@Sys.wait.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(IF_FALSE0)
(WHILE_EXP0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Sys.wait.2
D;JGT
@SP
A=M-1
M=1
(Sys.wait.2)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant 50
@50
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
(WHILE_EXP1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Sys.wait.3
D;JGT
@SP
A=M-1
M=1
(Sys.wait.3)
@SP
A=M-1
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
(WHILE_END1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.error nLocals: 0
(Sys.error)
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new nArgs: 1
@Sys.error.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Sys.error.0)
// push constant 69
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar nArgs: 2
@Sys.error.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error.1)
// push constant 82
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar nArgs: 2
@Sys.error.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error.2)
// push constant 82
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar nArgs: 2
@Sys.error.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error.3)
// call Output.printString nArgs: 1
@Sys.error.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Sys.error.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt nArgs: 1
@Sys.error.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Sys.error.5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Sys.halt nArgs: 0
@Sys.error.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.error.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.init nLocals: 0
(Keyboard.init)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.keyPressed nLocals: 0
(Keyboard.keyPressed)
// push constant 24576
@24576
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.peek nArgs: 1
@Keyboard.keyPressed.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Keyboard.keyPressed.0)
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readChar nLocals: 2
(Keyboard.readChar)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.printChar nArgs: 1
@Keyboard.readChar.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Keyboard.readChar.1
D;JEQ
@SP
A=M-1
M=1
(Keyboard.readChar.1)
@SP
A=M-1
M=M-1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Keyboard.readChar.2
D;JGT
@SP
A=M-1
M=1
(Keyboard.readChar.2)
@SP
A=M-1
M=M-1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// call Keyboard.keyPressed nArgs: 0
@Keyboard.readChar.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.readChar.3)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Keyboard.readChar.4
D;JGT
@SP
A=M-1
M=1
(Keyboard.readChar.4)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
(IF_FALSE0)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// call String.backSpace nArgs: 0
@Keyboard.readChar.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readChar.5)
// call Output.printChar nArgs: 1
@Keyboard.readChar.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar.6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printChar nArgs: 1
@Keyboard.readChar.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar.7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readLine nLocals: 5
(Keyboard.readLine)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push constant 80
@80
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new nArgs: 1
@Keyboard.readLine.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Keyboard.readLine.0)
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString nArgs: 1
@Keyboard.readLine.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Keyboard.readLine.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call String.newLine nArgs: 0
@Keyboard.readLine.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Keyboard.readLine.2)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// call String.backSpace nArgs: 0
@Keyboard.readLine.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readLine.3)
// pop local 2
@2
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(WHILE_EXP0)
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// call Keyboard.readChar nArgs: 0
@Keyboard.readLine.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0;JMP
(Keyboard.readLine.4)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Keyboard.readLine.5
D;JEQ
@SP
A=M-1
M=1
(Keyboard.readLine.5)
@SP
A=M-1
M=M-1
// pop local 4
@4
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
(IF_TRUE0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Keyboard.readLine.6
D;JEQ
@SP
A=M-1
M=1
(Keyboard.readLine.6)
@SP
A=M-1
M=M-1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
(IF_TRUE1)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.eraseLastChar nArgs: 1
@Keyboard.readLine.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0;JMP
(Keyboard.readLine.7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@IF_END1
0;JMP
(IF_FALSE1)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.appendChar nArgs: 2
@Keyboard.readLine.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@2
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Keyboard.readLine.8)
// pop local 3
@3
D=A
@LCL
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
(IF_END1)
(IF_FALSE0)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
(WHILE_END0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readInt nLocals: 2
(Keyboard.readInt)
@SP
AM=M+1
M=0
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call Keyboard.readLine nArgs: 1
@Keyboard.readInt.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0;JMP
(Keyboard.readInt.0)
// pop local 0
@SP
AM=M-1
D=M
@LCL
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.intValue nArgs: 1
@Keyboard.readInt.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.intValue
0;JMP
(Keyboard.readInt.1)
// pop local 1
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// call String.dispose nArgs: 1
@Keyboard.readInt.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Keyboard.readInt.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.new nLocals: 0
(Square.new)
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc nArgs: 1
@Square.new.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Square.new.0)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
// push argument 2
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.draw nArgs: 1
@Square.new.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.draw
0;JMP
(Square.new.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.dispose nLocals: 1
(Square.dispose)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc nArgs: 1
@Square.dispose.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Square.dispose.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.draw nLocals: 1
(Square.draw)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// call Screen.setColor nArgs: 1
@Square.draw.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.draw.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.draw.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.draw.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.erase nLocals: 1
(Square.erase)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor nArgs: 1
@Square.erase.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.erase.0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.erase.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.erase.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.incSize nLocals: 1
(Square.incSize)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 254
@254
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.incSize.0
D;JLT
@SP
A=M-1
M=1
(Square.incSize.0)
@SP
A=M-1
M=M-1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 510
@510
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.incSize.1
D;JLT
@SP
A=M-1
M=1
(Square.incSize.1)
@SP
A=M-1
M=M-1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_incSize_if_0
@SP
AM=M-1
D=M
@Square_incSize_if_0
D;JNE
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.erase nArgs: 1
@Square.incSize.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.erase
0;JMP
(Square.incSize.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.draw nArgs: 1
@Square.incSize.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.draw
0;JMP
(Square.incSize.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_incSize_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.decSize nLocals: 1
(Square.decSize)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.decSize.0
D;JGT
@SP
A=M-1
M=1
(Square.decSize.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_decSize_if_0
@SP
AM=M-1
D=M
@Square_decSize_if_0
D;JNE
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.erase nArgs: 1
@Square.decSize.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.erase
0;JMP
(Square.decSize.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop this 2
@2
D=A
@THIS
D=D+M
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
// push pointer 0
@3
D=M
@SP
M=M+1
A=M-1
M=D
// call Square.draw nArgs: 1
@Square.decSize.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Square.draw
0;JMP
(Square.decSize.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_decSize_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.moveUp nLocals: 1
(Square.moveUp)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.moveUp.0
D;JGT
@SP
A=M-1
M=1
(Square.moveUp.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_moveUp_if_0
@SP
AM=M-1
D=M
@Square_moveUp_if_0
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor nArgs: 1
@Square.moveUp.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveUp.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveUp.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveUp.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// call Screen.setColor nArgs: 1
@Square.moveUp.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveUp.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveUp.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveUp.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_moveUp_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.moveDown nLocals: 1
(Square.moveDown)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 254
@254
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.moveDown.0
D;JLT
@SP
A=M-1
M=1
(Square.moveDown.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_moveDown_if_0
@SP
AM=M-1
D=M
@Square_moveDown_if_0
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor nArgs: 1
@Square.moveDown.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveDown.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveDown.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveDown.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// call Screen.setColor nArgs: 1
@Square.moveDown.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveDown.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveDown.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveDown.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_moveDown_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.moveLeft nLocals: 1
(Square.moveLeft)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.moveLeft.0
D;JGT
@SP
A=M-1
M=1
(Square.moveLeft.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_moveLeft_if_0
@SP
AM=M-1
D=M
@Square_moveLeft_if_0
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor nArgs: 1
@Square.moveLeft.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveLeft.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveLeft.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveLeft.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// call Screen.setColor nArgs: 1
@Square.moveLeft.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveLeft.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveLeft.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveLeft.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_moveLeft_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Square.moveRight nLocals: 1
(Square.moveRight)
@SP
AM=M+1
M=0
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 510
@510
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@Square.moveRight.0
D;JLT
@SP
A=M-1
M=1
(Square.moveRight.0)
@SP
A=M-1
M=M-1
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// push temp 1
@6
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Square_moveRight_if_0
@SP
AM=M-1
D=M
@Square_moveRight_if_0
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor nArgs: 1
@Square.moveRight.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveRight.1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveRight.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveRight.2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// call Screen.setColor nArgs: 1
@Square.moveRight.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@1
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Square.moveRight.3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle nArgs: 4
@Square.moveRight.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@ARG
M=D
@4
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Square.moveRight.4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
(Square_moveRight_if_0)
// pop temp 1
@SP
AM=M-1
D=M
@R6
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R15
AM=M-1
D=M
@THAT
M=D
@R15
AM=M-1
D=M
@THIS
M=D
@R15
AM=M-1
D=M
@ARG
M=D
@R15
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
